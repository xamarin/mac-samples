// This file has been autogenerated from a class added in the UI designer.
using System;
using Foundation;
using AppKit;
using CoreGraphics;

namespace SourceWriter
{
	/// <summary>
	/// The <see cref="SourceWriter.PreviewVIewController"/> is used to present a formatted preview of the final
	/// output of a given document to the user.
	/// </summary>
	public partial class PreviewVIewController : NSViewController
	{
		#region Application Access
		/// <summary>
		/// A helper shortcut to the app delegate.
		/// </summary>
		/// <value>The app.</value>
		public static AppDelegate App {
			get { return (AppDelegate)NSApplication.SharedApplication.Delegate; }
		}
		#endregion

		#region Computed Properties
		/// <summary>
		/// Gets or sets the visible rect (the current scroll position within the document).
		/// </summary>
		/// <value>The visible rect.</value>
		public CGRect VisibleRect { get; set;} = new CGRect(0,0,0,0);

		/// <summary>
		/// Gets or sets the Scroll View for the currently displayed preview.
		/// </summary>
		/// <value>The <c>NSScrollView</c> containing the preview.</value>
		public NSScrollView Scroll { get; set; } = null;

		/// <summary>
		/// Gets or sets a value indicating whether this <see cref="SourceWriter.PreviewVIewController"/> is 
		/// currenlty in the process of updating the preview.
		/// </summary>
		/// <value><c>true</c> if updating; otherwise, <c>false</c>.</value>
		public bool Updating { get; set; } = false;

		/// <summary>
		/// Gets the window controller.
		/// </summary>
		/// <value>The window controller.</value>
		public PreviewWindowController WindowController {
			get { return View.Window.WindowController as PreviewWindowController; }
		}
		#endregion

		#region Constructors
		/// <summary>
		/// Initializes a new instance of the <see cref="SourceWriter.PreviewVIewController"/> class.
		/// </summary>
		/// <param name="handle">Handle.</param>
		public PreviewVIewController (IntPtr handle) : base (handle)
		{
			
		}
		#endregion

		#region Public Methods
		/// <summary>
		/// Displays the given text string as final output to the user using a <c>WebKit</c> view.
		/// </summary>
		/// <param name="text">The formatted text to display.</param>
		/// <param name="filePath">The path of the file.</param>
		public void DisplayPreview(string text, string filePath) {

			// Are we already performing an update?
			if (Updating) return;

			// Save current scroll position
			Scroll = WebPreview.MainFrame.FrameView.DocumentView.EnclosingScrollView;
			if (Scroll != null) {
				VisibleRect = Scroll.ContentView.DocumentVisibleRect ();
			}

			// Update view contents
			Updating = true;
			WebPreview.Hidden = true;
			if (filePath == "") {
				WebPreview.MainFrame.LoadHtmlString (text, null);
			} else {
				var url = NSUrl.CreateFileUrl(filePath, true, null);
				WebPreview.MainFrame.LoadHtmlString (text, url);
			}

		}

		/// <summary>
		/// Prints the preview.
		/// </summary>
		public void PrintPreview() {
			WebPreview.Print (this);
		}

		/// <summary>
		/// Scrolls to the top of the document.
		/// </summary>
		public void ScrollToTop() {

			// Grab scroller
			Scroll = WebPreview.MainFrame.FrameView.DocumentView.EnclosingScrollView;

			// Move to top
			if (Scroll != null) {
				Scroll.ContentView.ScrollToPoint (new CGPoint(0,0));
				Scroll.ReflectScrolledClipView (Scroll.ContentView);
				VisibleRect = Scroll.ContentView.DocumentVisibleRect ();
			}

		}

		/// <summary>
		/// Scrolls to bottom of the document.
		/// </summary>
		public void ScrollToBottom() {

			// Grab scroller
			Scroll = WebPreview.MainFrame.FrameView.DocumentView.EnclosingScrollView;

			// Move to top
			if (Scroll != null) {
				var y = Scroll.ContentView.Bounds.Size.Height;
				Scroll.ContentView.ScrollToPoint (new CGPoint(0,y));
				Scroll.ReflectScrolledClipView (Scroll.ContentView);
				VisibleRect = Scroll.ContentView.DocumentVisibleRect ();
			}

		}

		/// <summary>
		/// Displays the current zoom level.
		/// </summary>
		public void DisplayZoomLevel() {

			var level = Scroll.Magnification * 100.0f;
			ZoomLevel.StringValue = string.Format ("Zoom: {0:####}%", level);
		}

		/// <summary>
		/// Zooms in on the document preview.
		/// </summary>
		public void  ZoomIn() {

			Scroll.Magnification += 0.10f;
			DisplayZoomLevel ();

		}

		/// <summary>
		/// Returns the document preview to its original size.
		/// </summary>
		public void OriginalSize() {

			Scroll.Magnification = 1.0f;
			DisplayZoomLevel ();

		}

		/// <summary>
		/// Zooms out on the document preview.
		/// </summary>
		public void ZoomOut() {

			Scroll.Magnification -= 0.10f;
			DisplayZoomLevel ();
		}
		#endregion

		#region Override Methods
		/// <summary>
		/// Called before the view is presented to the user.
		/// </summary>
		public override void ViewWillAppear ()
		{
			base.ViewWillAppear ();

			// Grab scroller
			Scroll = WebPreview.MainFrame.FrameView.DocumentView.EnclosingScrollView;

			// Configure preview
			Scroll.AllowsMagnification = true;
			Scroll.Magnification = 1.0f;

			// Wire-up events
			WebPreview.FinishedLoad += (sender, e) => {
				// Restore to preview scroll location
				if (Scroll != null) {
					Scroll.ContentView.ScrollToPoint (VisibleRect.Location);
					Scroll.ReflectScrolledClipView (Scroll.ContentView);
					VisibleRect = Scroll.ContentView.DocumentVisibleRect ();
				}

				// Clear update flag
				Updating = false;
				WebPreview.Hidden = false;
			};
		}

		/// <summary>
		/// This methods is called after the view is displayed.
		/// </summary>
		public override void ViewDidAppear ()
		{
			base.ViewDidAppear ();

			// Update UI
			WindowController.Print.Disabled = false;
		}
		#endregion
	}
}
