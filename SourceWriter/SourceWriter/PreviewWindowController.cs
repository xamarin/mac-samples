// This file has been autogenerated from a class added in the UI designer.
using System;
using Foundation;
using AppKit;
using System.IO;

namespace SourceWriter
{
	/// <summary>
	/// The <see cref="SourceWriter.PreviewWindowController"/> is responsible for controlling the Window
	/// used to present a formatted preview of a document's content to the user.
	/// </summary>
	public partial class PreviewWindowController : NSWindowController
	{
		#region Application Access
		/// <summary>
		/// A helper shortcut to the app delegate.
		/// </summary>
		/// <value>The app.</value>
		public static AppDelegate App {
			get { return (AppDelegate)NSApplication.SharedApplication.Delegate; }
		}
		#endregion

		#region Private Variables
		/// <summary>
		/// The title of the last document window that was attached to the preview.
		/// </summary>
		private string LastWindowTitle = "";
		#endregion

		#region Computed Properties
		/// <summary>
		/// Gets the content controller.
		/// </summary>
		/// <value>The content controller.</value>
		public PreviewVIewController ContentController {
			get { return Window.ContentViewController as PreviewVIewController; }
		}

		/// <summary>
		/// Gets the print.
		/// </summary>
		/// <value>The print.</value>
		public ManualToolbarItem Print {
			get { return ToolbarPrint; }
		}

		/// <summary>
		/// Gets or sets the <c>ViewController</c> who's document is currently being previewed.
		/// </summary>
		/// <value>The preview controller.</value>
		public ViewController PreviewController { get; set; }
		#endregion

		#region Comstructors
		/// <summary>
		/// Initializes a new instance of the <see cref="SourceWriter.PreviewWindowController"/> class.
		/// </summary>
		/// <param name="handle">Handle.</param>
		public PreviewWindowController (IntPtr handle) : base (handle)
		{
		}
		#endregion

		#region Override Methods
		/// <summary>
		/// Called when the window has been loaded from the Storyboard file.
		/// </summary>
		public override void WindowDidLoad ()
		{
			base.WindowDidLoad ();

			// Initialize
			Window.Delegate = new PreviewWindowDelegate(this);
			App.PreviewWindow = this;
		}
		#endregion

		#region Public Methods
		/// <summary>
		/// Displays the current <c>PreviewController</c>'s document in the webview
		/// </summary>
		/// <param name="title">The title of the document being displayed.</param>
		/// <param name="text">The formatted text to be displayed.</param>
		/// <param name="previewController">The <c>ViewController</c> who's document is being displayed.</param>
		/// <param name="filePath">The path of the file.</param>
		public void DisplayPreview(string title, string text, ViewController previewController, string filePath) {
			string baseURL = "";

			// Save connection to the currently displayed document
			PreviewController = previewController;

			// Move to top of view?
			if (title != LastWindowTitle) {
				// Jump to top of document
				ContentController.ScrollToTop();
			}

			// Update the display
			Window.Title = string.Format ("{0} Preview", title);
			if (filePath != "") {
				baseURL = Path.GetDirectoryName (filePath);
			}
			ContentController.DisplayPreview (text, baseURL);

			// Save title
			LastWindowTitle = title;
		}
		#endregion

		#region Actions
		/// <summary>
		/// Refreshes the preview by asking the attached <c>ViewController</c> to redisplay the preview.
		/// </summary>
		/// <param name="sender">The control calling this action.</param>
		partial void RefreshPreview (Foundation.NSObject sender) {

			// Ask view to refresh our preview
			if (PreviewController != null) {
				PreviewController.PreviewContents();
			}

		}

		/// <summary>
		/// Erases the preview and breaks the connection to the document.
		/// </summary>
		/// <param name="sender">The control calling this action.</param>
		partial void ErasePreview (Foundation.NSObject sender) {

			// Empty preview
			Window.Title = "No Preview";
			ContentController.DisplayPreview ("", "");
			PreviewController = null;
		}

		/// <summary>
		/// Scrolls the preview document to top.
		/// </summary>
		/// <param name="sender">The control calling this action.</param>
		partial void ScrollToTop (Foundation.NSObject sender) {
			ContentController.ScrollToTop();
		}

		/// <summary>
		/// Scrolls the preview document to bottom.
		/// </summary>
		/// <param name="sender">Sender.</param>
		partial void ScrollToBottom (Foundation.NSObject sender) {
			ContentController.ScrollToBottom();
		}

		/// <summary>
		/// Returns the document preview to its original size.
		/// </summary>
		/// <param name="sender">The control calling this action.</param>
		partial void OriginalSize (Foundation.NSObject sender) {
			ContentController.OriginalSize();
		}
			
		/// <summary>
		/// Zooms in on the document preview.
		/// </summary>
		/// <param name="sender">The control calling this action.</param>
		partial void ZoomIn (Foundation.NSObject sender) {
			ContentController.ZoomIn();
		}

		/// <summary>
		/// Zooms out on the document preview.
		/// </summary>
		/// <param name="sender">The control calling this action.</param>
		partial void ZoomOut (Foundation.NSObject sender) {
			ContentController.ZoomOut();
		}

		/// <summary>
		/// Prints the document currently being edited.
		/// </summary>
		/// <param name="sender">The controller calling the method.</param>
		[Action("print:")]
		public void PrintDocument (NSObject sender) {
			ContentController.PrintPreview ();
		}
		#endregion
	}
}
